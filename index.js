// Generated by CoffeeScript 1.9.2
var isAlpha, isAlphanumeric, isNumber, isOperation, isTimezone;

isNumber = function(n) {
  return n >= '0' && n <= '9';
};

isAlpha = function(n) {
  return n >= 'a' && n <= 'z' || n >= 'A' && n <= 'Z';
};

isAlphanumeric = function(n) {
  return isNumber(n) || isAlpha(n);
};

isOperation = function(n) {
  return n === '/' || n === '+' || n === '-' || n === '(';
};

isTimezone = function(n) {
  return isAlpha(n) || n === '_' || n === '/';
};

module.exports = function(moment) {
  var spanner;
  if (moment.spanner != null) {
    return moment;
  }
  spanner = function(anchor, tz, s, vars) {
    var duration, f, i, readalpha, readduration, readnumber, readtimezone, shorthand, variable;
    i = 0;
    readalpha = function() {
      var n, res;
      n = 0;
      while (i + n < s.length && isAlpha(s[i + n])) {
        n++;
      }
      res = s.substr(i, n);
      i += n;
      return res;
    };
    readnumber = function() {
      var n, res;
      n = 0;
      while (i + n < s.length && isNumber(s[i + n])) {
        n++;
      }
      res = s.substr(i, n);
      i += n;
      return res;
    };
    readtimezone = function() {
      var n, res;
      n = 0;
      while (i + n < s.length && isTimezone(s[i + n])) {
        n++;
      }
      res = s.substr(i, n);
      i += n;
      return res;
    };
    readduration = function() {
      var shorthand, value;
      value = readnumber();
      if (value === '') {
        value = 1;
      }
      shorthand = readalpha();
      return moment.duration(+value, shorthand);
    };
    if (i < s.length && s[i] === '(') {
      i++;
      tz = readtimezone();
      if (s[i] !== ')') {
        throw new Error('Expecting closing ) on timezone');
      }
      i++;
    }
    if (i < s.length && isAlpha(s[i])) {
      variable = readalpha();
      if (variable !== 'now') {
        if ((vars == null) || (vars[variable] == null)) {
          throw new Error("Variable " + variable + " not known");
        }
        f = vars[variable];
        if (typeof f === 'function') {
          f = f(tz);
        }
        anchor = f;
      }
    }
    if (tz != null) {
      anchor = anchor.tz(tz);
    }
    while (i < s.length && isOperation(s[i])) {
      if (s[i] === '/') {
        i++;
        shorthand = readalpha();
        anchor = anchor.startOf(shorthand);
      } else if (s[i] === '+') {
        i++;
        while (i < s.length && isAlphanumeric(s[i])) {
          duration = readduration();
          anchor = anchor.add(duration);
        }
      } else if (s[i] === '-') {
        i++;
        while (i < s.length && isAlphanumeric(s[i])) {
          duration = readduration();
          anchor = anchor.subtract(duration);
        }
      } else if (s[i] === '(') {
        i++;
        tz = readtimezone();
        anchor = anchor.tz(tz);
        if (s[i] !== ')') {
          throw new Error('Expecting closing ) on timezone');
        }
        i++;
      }
    }
    if (i < s.length) {
      throw new Error("unknown format " + i + " < " + s.length);
    }
    return anchor;
  };
  moment.spanner = function(s, vars) {
    var iso8601;
    iso8601 = moment(s, moment.ISO_8601);
    if (iso8601.isValid()) {
      return iso8601;
    }
    return spanner(moment(), 'UTC', s, vars);
  };
  moment.fn.spanner = function(s, vars) {
    var ref, tz;
    tz = (ref = this._z) != null ? ref.name : void 0;
    return spanner(this, tz, s, vars);
  };
  return moment;
};
